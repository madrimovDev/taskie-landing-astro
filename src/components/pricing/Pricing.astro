---
import i18next, { t } from "i18next";
export interface Root {
  name: string;
  products: Product[];
  totalPrice: number;
}

export interface Product {
  name: string;
  price: number;
  count: string;
}
const plans = t("plans.items", {
  returnObjects: true
}) as Root[];
---

<section id="pricing" class="py-8">
  <h2 class="text-center text-3xl md:text-6xl mt-8 mb-8 md:mb-16 font-semibold">Tariflar</h2>
  <div class="container">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
      {
        plans.map((plan, index) => {
          return (
            <div
              data-gsap="pricing-item"
              class="w-full shadow-md py-8 px-2 md:px-4 flex flex-col gap-4 items-center rounded-md border hover:border-primary overflow-hidden relative"
              class:list={[{
                "border-2 border-primary": index === 1,
                "border-transparent": index !== 1
              }]}
            >
              <div
                class:list={["bg-primary text-white w-[150px] text-center py-2 font-bold absolute rotate-45 top-0 right-0 translate-x-1/4 translate-y-1/2", {
                  "hidden": index !== 1
                }]}>
                TOP
              </div>
              <h3 class="text-3xl font-bold">{plan.name}</h3>
              <p class:list={["text-center", "opacity-50", {
                "hidden": plan.totalPrice !== 0
              }]}>
                {
                  plan.totalPrice === 0 && "Faqat kerakli hizmatlarni tanlash imkoniyati"
                }
              </p>
              <ul class="w-full h-full flex flex-col gap-4 my-4">
                {
                  plan.products.map(product => {
                    return (
                      <li class="flex items-center gap-2 md:text-lg">
                        <span class="">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                             stroke="currentColor" class="size-5 text-primary">
                          <path stroke-linecap="round" stroke-linejoin="round"
                                d="M9 12.75 11.25 15 15 9.75M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                        </svg>
                        </span>
                        <span>
                        {product.name} / {product.count} = {new Intl.NumberFormat(i18next.language, {
                          currency: "UZS",
                          style: "currency",
                          minimumFractionDigits: 0
                        }).format(product.price)}
                        </span>
                      </li>
                    );
                  })
                }
              </ul>
              <h4
                class="text-xl font-bold text-primary">{plan.totalPrice > 0 && new Intl.NumberFormat(i18next.language, {
                currency: "UZS",
                style: "currency",
                minimumFractionDigits: 0
              }).format(plan.totalPrice)}
              </h4>
              <a href={`/pricing/${plan.name}`}
                 class="inline-block text-center bg-primary w-full py-4 text-lg font-bold text-white rounded-md">{t("buy")}</a>
            </div>
          );
        })
      }
    </div>
  </div>
</section>

<script>
  import { gsap, ScrollTrigger } from "../../utils/gsap";

  const pricing = document.getElementById("pricing");
  const items = document.querySelectorAll("[data-gsap='pricing-item']");
  const title = document.querySelector("#pricing>h2");
  const timeline = gsap.timeline({
    defaults: {
      opacity: 0,
      scale: 0.8,
      ease: "power2.out",
      duration: 1
    }
  });
  timeline.from(title, {
    opacity: 0
  });
  items.forEach((item, index) => {
    timeline.from(item, {
      y: 20 * index, // Adding some vertical offset for each item
      rotation: index % 2 === 0 ? 5 : -5 // Alternate rotation for each item
    }, `-=${index * 0.3}`); // Staggering the start time of each animation
  });

  ScrollTrigger.create({
    trigger: pricing,
    animation: timeline,
    start: "top 50%", // Start animation when the trigger is 80% from the top of the viewport
    end: "bottom 90%" // End animation when the trigger is 20% from the bottom of the viewport
  });
</script>