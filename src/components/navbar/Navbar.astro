---
import { t } from "i18next";
import LangSelector from "../core/LangSelector.astro";
import ExternalLink from "astro-heroicons/solid/ArrowTopRightOnSquare.astro";

type NavItem = {
  name: string;
  href: string;
};
const navigations = t("menu.navigations", {
  returnObjects: true
}) as NavItem[];
const navButtons = t("menu.buttons", { returnObjects: true }) as NavItem[];
---

<div
  id="navbar"
  class="fixed top-0 inset-x-0 w-full z-50 transition-colors"
>
  <nav class="h-28 container flex items-center">
    <div class="flex-1">
      <a href="">
        <img
          alt="taskie"
          src="/logo_full.png"
          width={120}
        />
      </a>
    </div>
    <div class="grow flex justify-center h-full items-center">
      <ul class="flex gap-10 text-lg font-semibold text-stone-700">
        {
          navigations.map((item) => {
            const isWithHttp = item.href.split("/").length > 1;
            return (
              <li>
                <a
                  data-link={item.name}
                  href={item.href}
                  target={isWithHttp ? "_blank" : "_self"}
                  class="flex items-center gap-2 hover:text-primary transition-colors"
                >
                  {item.name} {isWithHttp &&
                  <ExternalLink width="0.8em" />}
                </a>
              </li>
            );
          })
        }
      </ul>
    </div>
    <div class="flex-1 flex justify-end gap-8">
      <LangSelector />
      <div>
        {
          navButtons.map((item) => {
            return (
              <button class="bg-primary px-8 py-4 rounded-md text-white font-bold text-lg">
                {item.name}
              </button>
            );
          })
        }
      </div>
    </div>
  </nav>
</div>

<script>
  const navbar = document.getElementById("navbar") as HTMLDivElement;
  const header = document.getElementById("header") as HTMLElement;
  header.style.paddingTop = navbar.getBoundingClientRect()?.height + "px";

  window.addEventListener("scroll", () => {
    if (window.scrollY >= navbar.getBoundingClientRect().height) {
      navbar.classList.add("backdrop-navbar");
    } else {
      navbar.classList.remove("backdrop-navbar");
    }
  });

  const items = document.querySelectorAll<HTMLAnchorElement>("[data-link]");

  const changeActiveLink = (hash: string) => {
    items.forEach((item) => {
      const itemHash = item.href.split("#").at(-1);
      if (itemHash === hash) {
        item.classList.add("active-link");
      } else {
        item.classList.remove("active-link");
      }
    });
  };

  const hash = location.hash.substring(1);

  changeActiveLink(hash);

  window.addEventListener("hashchange", (e) => {
    const hash = e.newURL.split("#").at(-1);
    console.log(hash);
    changeActiveLink(hash ?? "");
  });
</script>
