---
import { t } from "i18next";
import LangSelector from "../core/LangSelector.astro";
import ExternalLink from "astro-heroicons/solid/ArrowTopRightOnSquare.astro";
import isWithHttpHref from "../../utils/isUrl";

type NavItem = {
  name: string;
  href: string;
};
const navigations = t("menu.navigations", {
  returnObjects: true
}) as NavItem[];
const navButtons = t("menu.buttons", { returnObjects: true }) as NavItem[];
---

<div
  id="navbar"
  class="fixed top-0 inset-x-0 w-full z-50 transition-colors backdrop-navbar"
>
  <nav class="h-20 md:h-28 container flex items-center relative">
    <div class="flex-none mr-12">
      <a href="/">
        <img
          alt="taskie"
          src="/logo_full.png"
          width={120}
          class="w-[80px] sm:w-[120px]"
        />
      </a>
    </div>
    <div
      id="navbar-menu"
      class="transition-all z-40 lg:z-auto ease-in grow absolute lg:static bg-slate-100 lg:bg-transparent top-full inset-x-0 flex  overflow-hidden md:overflow-auto  lg:h-full items-center">
      <ul
        class="transition-all flex flex-col lg:flex-row gap-6 py-10 px-4 lg:py-0 items-start w-full lg:w-auto lg:gap-10 text-xl lg:text-base font-semibold text-stone-700 h-[300px] lg:h-auto">
        {
          navigations.map((item) => {
            const isWithHttp = isWithHttpHref(item.href);
            if (item.href === "face-id") {
              return (
                <li>
                  <a
                    data-link={item.name}
                    href={"/" + item.href}
                    class="flex items-center gap-2 font-bold text-primary hover:text-primary transition-colors"
                  >
                    {item.name}
                  </a>
                </li>);
            }
            return (
              <li>
                <a
                  data-link={item.name}
                  href={"/" + item.href.split("/").join("")}
                  target={isWithHttp ? "_blank" : "_self"}
                  class="flex items-center gap-2 hover:text-primary transition-colors"
                >
                  {item.name} {isWithHttp &&
                  <ExternalLink width="0.8em" />}
                </a>
              </li>
            );
          })
        }
      </ul>
    </div>
    <div class="flex-1 flex justify-end gap-4 md:gap-8 items-center">
      <button id="navbar-toggle" class="flex items-center lg:hidden border border-black/20 rounded-md px-1 py-1">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
             class="size-5">
          <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
        </svg>
      </button>
      <span class="hidden md:flex items-center">
        <LangSelector />
      </span>
      <div>
        {
          navButtons.map((item) => {
            return (
              <button id="contact"
                      data-modal-trigger="contact-modal"
                      class="bg-primary px-4 py-2 md:px-8 md:py-4 rounded-md text-white font-bold text-sm md:text-lg">
                {item.name}
              </button>
            );
          })
        }
      </div>
    </div>
  </nav>
</div>

<script>
  import { gsap } from "../../utils/gsap";

  const navbar = document.getElementById("navbar") as HTMLDivElement;
  const header = document.getElementById("header") as HTMLElement;
  const navMenu = document.getElementById("navbar-menu");
  const navToggle = document.getElementById("navbar-toggle");

  let navbarHeight = navbar.getBoundingClientRect().height;
  header.style.paddingTop = navbarHeight + "px";
  gsap.from(navbar, {
    duration: 1.5,          // duration of the animation
    y: "-80%",             // starting position
    opacity: 0.5,             // starting opacity
    ease: "power4.out",     // easing function for a smooth effect
    transformOrigin: "top center"  // origin of the transformation
  });
  const toggleNavbar = (type?: "show" | "hide") => {
    if (!navMenu) return;
    if (type === "show") {
      navMenu.classList.remove("navbar-expanded");
      navMenu.classList.add("navbar-expand");
    } else {
      navMenu.classList.add("navbar-expanded");
      navMenu.classList.remove("navbar-expand");
    }

  };


  const changeActiveLink = (hash: string) => {
    items.forEach((item) => {
      const itemHash = item.href.split("#").pop();
      item.classList.toggle("active-link", itemHash === hash);
    });
  };

  const items = document.querySelectorAll<HTMLAnchorElement>("[data-link]");
  const hash = location.hash.substring(1);
  changeActiveLink(hash);

  window.addEventListener("hashchange", () => {
    changeActiveLink(location.hash.substring(1));
  });

  navToggle?.addEventListener("click", () => {
    if (navMenu?.classList.contains("navbar-expanded")) {
      toggleNavbar("show");
    } else {
      toggleNavbar("hide");
    }
  });
  const hideMenu = () => {
    const match = window.matchMedia("(max-width: 1024px)").matches;
    if (!match) {
      toggleNavbar("show");
    } else {
      toggleNavbar("hide");
    }
  };
  hideMenu();
  window.addEventListener("resize", hideMenu);
</script>
